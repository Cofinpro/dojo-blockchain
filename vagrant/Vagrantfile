# -*- mode: ruby -*-
# vi: set ft=ruby :

module OS
    def OS.windows?
        (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
    end

    def OS.mac?
        (/darwin/ =~ RUBY_PLATFORM) != nil
    end

    def OS.linux?
        !OS.windows? and not OS.mac?
    end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 6814, host: 6814 
  config.vm.network "forwarded_port", guest: 6815, host: 6815 
  config.vm.network "forwarded_port", guest: 2750, host: 2750

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # MaxOS
  if OS.windows?
    config.vm.synced_folder "../multichain/", "/home/vagrant/.multichain", type: "smb"
  elsif OS.mac?
    config.vm.synced_folder "../multichain/", "/home/vagrant/.multichain", type: "nfs"
  end

  # Work around bug in vagarnt 1.8.5
  config.ssh.insert_key = false

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     vb.gui = false
  
     # Customize the amount of memory on the VM:
     vb.memory = "1024"

	 vb.name = "Multichain"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # Make sure the time is in sync
  config.vm.provision "shell", inline: <<-SHELL
	yum install -y ntpdate ntp
    systemctl enable ntpd
    systemctl start ntpd
  SHELL

  # Install multichain
  config.vm.provision "shell", inline: <<-SHELL
	 yum install -y wget vim unzip

     cd /tmp
     wget -q http://www.multichain.com/download/multichain-1.0-alpha-23.tar.gz
	 tar -xvzf multichain-1.0-alpha-23.tar.gz
     cd multichain-1.0-alpha-23
     mv multichaind multichain-cli multichain-util /usr/local/bin
  SHELL

  # Install multichain-explorer dependencies
  config.vm.provision "shell", inline: <<-SHELL
	yum install -y epel-release
    yum install -y python-pip sqlite-devel python-devel 
    pip install -q --upgrade pip
    yum groupinstall "Development tools" -y
	sudo pip install pycrypto
  SHELL

  # Install multichain-explorer
  config.vm.provision "shell", privileged:false, inline: <<-SHELL
    wget -q https://github.com/MultiChain/multichain-explorer/archive/master.zip -O /tmp/multichain-exlorer.zip
    unzip /tmp/multichain-exlorer.zip -d /home/vagrant/
	mv multichain-explorer-master multichain-explorer && cd multichain-explorer
    python setup.py install --user
    cp /home/vagrant/.multichain/multichain-explorer.conf /home/vagrant/multichain-explorer/cofinpro.conf
  SHELL

  config.vm.provision "shell", privileged:false, inline: <<-SHELL
	MULTICHAIN_HOME=/home/vagrant/.multichain

	if [ ! -d $MULTICHAIN_HOME/cofinpro ]; then
      multichain-util create cofinpro
      cp $MULTICHAIN_HOME/multichain.conf $MULTICHAIN_HOME/cofinpro/
    fi
  SHELL

  config.vm.provision "shell", run:"always", inline: "ntpdate pool.ntp.org"

  config.vm.provision "shell", run:"always", privileged:false, inline: "multichaind cofinpro -daemon"

  config.vm.provision "shell", run:"always", privileged:false, inline: <<-SHELL
    cd /home/vagrant/multichain-explorer
    nohup python -m Mce.abe --config cofinpro.conf 0<&- &>/dev/null & 
  SHELL
end
